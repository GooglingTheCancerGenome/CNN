#!/bin/bash -x
#$ -S /bin/bash
#$ -l h_rt=24:00:00
#$ -l h_vmem=64G
#$ -q all.q

echo "Load python"
# conda environment with required Python packages:
# pysam
# numpy
# pickle
# bz2file
# logging

conda activate cm

# If directory for script used to store per chromosome output files does not exist, create it
[ ! -d ${OUTARG}"/"${PRGARG} ] && mkdir -p ${OUTARG}"/"${PRGARG}

# which sample is considered
echo ${SAMPLEARG}
# which script is being executed
echo ${PRGARG}
# which BAM file is considered
echo ${BAMARG}
# which chromosome is considered
echo ${CHRARG}
# which window is considered
echo ${WINDOWARG}

RUNDIR="/hpc/cog_bioinf/ridder/users/lsantuari/Git/DeepSV_working/CNN/scripts/genome_wide"

echo "Running ${PRGARG} for ${BAMARG} ${CHRARG}"

# coverage.py will output file with extension '.npy.bz2'
if [ ${PRGARG} == 'coverage' ]; then
        echo python "${RUNDIR}/${PRGARG}.py" \
                --bam ${BAMARG} \
                --chr ${CHRARG} \
                --out ${PRGARG}".npy" \
                --outputpath ${OUTARG} \
                --logfile ${PRGARG}".log"

# snv.py will output file with extension '.npz.gz'
elif [ ${PRGARG} == 'snv' ]; then
        echo python "${RUNDIR}/${PRGARG}.py" \
                --bam ${BAMARG} \
                --twobit ${TWOBIT} \
                --chr ${CHRARG} \
                --out ${PRGARG}".npy" \
                --outputpath ${OUTARG} \
                --logfile ${PRGARG}".log"


elif [ ${PRGARG} == 'chr_array' ]; then
        echo python "${RUNDIR}/${PRGARG}.py" \
                --bam ${BAMARG} \
                --twobit ${TWOBIT} \
                --map ${MAP} \
                --chr ${CHRARG} \
                --sample ${SAMPLEARG} \
                --out ${SAMPLEARG}"_"${CHRARG}".hdf5" \
                --outputpath ${OUTARG} \
                --logfile ${SAMPLEARG}"_"${CHRARG}".log"

elif [ ${PRGARG} == 'clipped_read_distance' ]; then
# generic execution
	echo python "${RUNDIR}/${PRGARG}.py" \
                --bam ${BAMARG} \
                --chr ${CHRARG} \
                --out ${PRGARG}".json.gz" \
                --outputpath ${OUTARG} \
                --logfile ${PRGARG}".log"

else
# generic execution
	echo python "${RUNDIR}/${PRGARG}.py" \
                --bam ${BAMARG} \
                --out ${PRGARG}".json.gz" \
                --outputpath ${OUTARG} \
                --logfile ${PRGARG}".log"
fi

